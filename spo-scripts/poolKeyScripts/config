set -e            # Exit immediately with error if any command exits with a non-zero result code
set -u            # Exit immediately with error if we try to use an undefined variable
set -o pipefail   # Exit immediately with error if any command in a pipe chain exits with a non-zero result code

NETWORK1=--mainnet
NETWORK2=
#NETWORK1=--testnet-magic
#NETWORK2=1097911063

# set to either 'true' or anything else
THIS_NODE_IS_HOT=true
THIS_NODE_IS_COLD=true

BASE_DIR=~/keys

# There are three directories: 
#    HOT = online block-producer keys
#    COLD = offline secret keys
#    SHARE = files shuttled between hot and code nodes
# TODO: we might consider encrypting the contents of $SHARE while in transit. 
HOT=$BASE_DIR/hot
COLD=$BASE_DIR/cold
SHARE=$BASE_DIR/share
TMPDIR=~/tmp_cardano_scripts

#########################################################################
#########################################################################
# everything below this point is boilerplate / setup / util / helper
#########################################################################
#########################################################################


mkdir -p $TMPDIR
rm -f $TMPDIR/*

mkdir -p $BASE_DIR
chmod 700 $BASE_DIR
mkdir -p $SHARE
chmod 700 $SHARE
if [ $THIS_NODE_IS_HOT = 'true' ]; then
  mkdir -p $HOT
  chmod 700 $HOT
fi
if [ $THIS_NODE_IS_COLD = 'true' ]; then
  mkdir -p $COLD
  chmod 700 $COLD
fi

###########################################################################
# Helper function to prevent us from running scripts on the wrong node
###########################################################################

function ensure_we_are_hot_node {
  if [ $THIS_NODE_IS_HOT != 'true' ]; then
    echo "ERROR: This script must be run on the *HOT* node."
    echo "ERROR: To set this node as 'hot', in 'config' set"
    echo "    THIS_NODE_IS_HOT=true"
    exit 1
  fi
  # Since we're on the hot node, let's grab the current network parameters. 
  # It doesn't make sense to put these in a function called 'ensure_we_are_hot_node', 
  # but it's convenient... <shrug>
  if [ ! -f shelley-genesis.json ]; then
    echo "ERROR: we need a symlink to the shelley genesis file."
    echo "ERROR: Please do something like this:"
    echo "ERROR:     ln -s  ~/instance/mainnet-shelley-genesis.json  shelley-genesis.json"
  fi
  cardano-cli query protocol-parameters $NETWORK1 $NETWORK2 --out-file $SHARE/params.json
  currentSlot=$(cardano-cli query tip $NETWORK1 $NETWORK2 | jq '.slot')
  echo $currentSlot > $SHARE/currentSlot
  slotsPerKESPeriod=$(cat shelley-genesis.json | jq -r '.slotsPerKESPeriod')
  kesPeriod=$((${currentSlot} / ${slotsPerKESPeriod}))
  echo $kesPeriod > $SHARE/kesPeriod
}

function ensure_we_are_cold_node {
  if [ $THIS_NODE_IS_COLD != 'true' ]; then
    echo "ERROR: This script must be run on the *COLD* node."
    echo "ERROR: To set this node as 'cold', in 'config' set"
    echo "    THIS_NODE_IS_COLD=true"
    exit 1
  fi
}


###########################################################################
# Utility functions
###########################################################################

function cleanup_tmp_dir {
  rm -f $TMPDIR/*
  if [ -d $TMPDIR ]; then
    rmdir $TMPDIR
  fi
}

# get_balance()
#
# Gets the balance (and other things) for the given address
#
# Input:
#    x_PAYMENT_ADDRESS - where the funds are coming from
# Output:
#    total_balance - total ADA available on $PAYMENT_ADDRESS
#    txcnt - # of transactions on $PAYMENT_ADDRESS
#    tx_in - zero or more --tx-in parameters for subsequent commands to use  
function get_balance {
  x_PAYMENT_ADDRESS=$1; shift

  cardano-cli query utxo \
    --address $x_PAYMENT_ADDRESS \
    $NETWORK1 $NETWORK2 > $TMPDIR/fullUtxo.out

  tail -n +3 $TMPDIR/fullUtxo.out | sort -k3 -nr > $TMPDIR/balance.out

  tx_in=""
  total_balance=0
  while read -r utxo; do
    in_addr=$(awk '{ print $1 }' <<< "${utxo}")
    idx=$(awk '{ print $2 }' <<< "${utxo}")
    utxo_balance=$(awk '{ print $3 }' <<< "${utxo}")
    total_balance=$((${total_balance}+${utxo_balance}))
    echo TxHash: ${in_addr}#${idx}
    echo ADA: ${utxo_balance}
    tx_in="${tx_in} --tx-in ${in_addr}#${idx}"
  done < $TMPDIR/balance.out
  txcnt=$(cat $TMPDIR/balance.out | wc -l)
  echo Total ADA balance: ${total_balance}
  echo Number of UTXOs: ${txcnt}

  if [ "x$tx_in" = "x" ]; then
    echo "Insufficient funds."
    echo "Input address has no transactions providing it funds."
    echo "Address: $x_PAYMENT_ADDRESS"
    exit 1
  fi

  rm -f $TMPDIR/fullUtxo.out $TMPDIR/balance.out
}

# calculate_fee()
#
# Calculates the required fee for the given transaction
#
# Input: 
#    txcnt (env) - set by get_balance()
#    TX_BODY_FILENAME - the raw transaction body
#    WITNESS_COUNT - Number of required witnesses
# Output:
#    fee (environment variable)
# 
function calculate_fee {
  TX_BODY_FILENAME=$1; shift
  WITNESS_COUNT=$1; shift
  fee=$(cardano-cli transaction calculate-min-fee \
    --tx-body-file $TX_BODY_FILENAME \
    --tx-in-count ${txcnt} \
    --tx-out-count 1 \
    $NETWORK1 $NETWORK2 \
    --witness-count $WITNESS_COUNT \
    --byron-witness-count 0 \
    --protocol-params-file $SHARE/params.json | awk '{ print $1 }')
  echo fee: $fee
}

